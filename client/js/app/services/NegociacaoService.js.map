{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDao","Negociacao","NegociacaoService","_http","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","then","negociacoes","periodos","reduce","dados","periodo","concat","catch","Error","erro","get","map","Date","objeto","data","quantidade","valor","console","log","negociacao","getConnection","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","isEquals","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import { HttpService } from './HttpService';\r\nimport { ConnectionFactory } from './ConnectionFactory';\r\nimport { NegociacaoDao } from '../dao/NegociacaoDao';\r\nimport { Negociacao } from '../models/Negociacao';\r\n\r\nexport class NegociacaoService {\r\n\r\n  constructor() {\r\n    this._http = new HttpService();\r\n  }\r\n\r\n  obterNegociacoes() {\r\n\r\n    return Promise\r\n      .all([\r\n        this.obterNegociacoesDaSemana(),\r\n        this.obterNegociacoesDaSemanaAnterior(),\r\n        this.obterNegociacoesDaSemanaRetrasada()\r\n      ])\r\n      .then(periodos => {\r\n        let negociacoes = periodos\r\n          .reduce((dados, periodo) => dados.concat(periodo), []);\r\n        return negociacoes;\r\n      })\r\n      .catch(erro => {\r\n        throw new Error(erro);\r\n      });\r\n  }\r\n\r\n  obterNegociacoesDaSemana() {\r\n    return this._http\r\n      .get('negociacoes/semana')\r\n      .then(negociacoes => {\r\n        return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n      })\r\n      .catch(erro => {\r\n        console.log(erro);\r\n        throw new Error('Não foi possível obter as negociações da semana');\r\n      })\r\n  }\r\n\r\n  obterNegociacoesDaSemanaAnterior() {\r\n    return this._http\r\n      .get('negociacoes/anterior')\r\n      .then(negociacoes => {\r\n        return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n      })\r\n      .catch(erro => {\r\n        console.log(erro);\r\n        throw new Error('Não foi possível obter as negociações da semana anterior');\r\n      })\r\n  }\r\n\r\n  obterNegociacoesDaSemanaRetrasada() {\r\n    return this._http\r\n      .get('negociacoes/retrasada')\r\n      .then(negociacoes => {\r\n        return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n      })\r\n      .catch(erro => {\r\n        console.log(erro);\r\n        throw new Error('Não foi possível obter as negociações da semana retrasada');\r\n      })\r\n  }\r\n\r\n  cadastra(negociacao) {\r\n    return ConnectionFactory\r\n      .getConnection()\r\n      .then(connection => new NegociacaoDao(connection))\r\n      .then(dao => dao.adiciona(negociacao))\r\n      .then(() => 'Negociação adicionada com sucesso')\r\n      .catch(erro => {\r\n        console.log(erro);\r\n        throw new Error('Não foi possível adicionar a negociação');\r\n      });\r\n  }\r\n\r\n  lista() {\r\n    return ConnectionFactory\r\n      .getConnection()\r\n      .then(connection => new NegociacaoDao(connection))\r\n      .then(dao => dao.listaTodos())\r\n      .catch(erro => {\r\n        console.log(erro);\r\n        throw new Error('Não foi possível obter as negociações');\r\n      });\r\n\r\n  }\r\n\r\n  apaga() {\r\n\r\n    return ConnectionFactory\r\n      .getConnection()\r\n      .then(connection => new NegociacaoDao(connection))\r\n      .then(dao => dao.apagaTodos())\r\n      .then(() => 'Negociações apagadas com sucesso')\r\n      .catch(erro => {\r\n        console.log(erro);\r\n        throw new Error('Não foi possível apagar as negociações');\r\n      });\r\n  }\r\n\r\n  importa(listaAtual) {\r\n\r\n    return this.obterNegociacoes()\r\n      .then(negociacoes =>\r\n        negociacoes.filter(negociacao =>\r\n          // comparação de objetos não dá certo do jeito tradicional\r\n          // por isso fizemos um jeito de comparar os objetos em json -> string\r\n          !listaAtual.some(negociacaoExistente =>\r\n            negociacao.isEquals(negociacaoExistente)))\r\n      )\r\n      .catch(erro => {\r\n        console.log(erro);\r\n        throw new Error('Não foi possível buscar negociações para importar');\r\n      })\r\n  }\r\n\r\n}"]}