{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","then","negociacoes","periodos","reduce","dados","periodo","concat","catch","Error","erro","get","map","Negociacao","Date","objeto","data","quantidade","valor","console","log","negociacao","ConnectionFactory","getConnection","NegociacaoDao","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","isEquals","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\r\n\r\n  constructor() {\r\n    this._http = new HttpService();\r\n  }\r\n\r\n  obterNegociacoes() {\r\n\r\n    return Promise\r\n      .all([\r\n        this.obterNegociacoesDaSemana(),\r\n        this.obterNegociacoesDaSemanaAnterior(),\r\n        this.obterNegociacoesDaSemanaRetrasada()\r\n      ])\r\n      .then(periodos => {\r\n        let negociacoes = periodos\r\n          .reduce((dados, periodo) => dados.concat(periodo), []);\r\n        return negociacoes;\r\n      })\r\n      .catch(erro => {\r\n        throw new Error(erro);\r\n      });\r\n  }\r\n\r\n  obterNegociacoesDaSemana() {\r\n    return this._http\r\n      .get('negociacoes/semana')\r\n      .then(negociacoes => {\r\n        return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n      })\r\n      .catch(erro => {\r\n        console.log(erro);\r\n        throw new Error('Não foi possível obter as negociações da semana');\r\n      })\r\n  }\r\n\r\n  obterNegociacoesDaSemanaAnterior() {\r\n    return this._http\r\n      .get('negociacoes/anterior')\r\n      .then(negociacoes => {\r\n        return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n      })\r\n      .catch(erro => {\r\n        console.log(erro);\r\n        throw new Error('Não foi possível obter as negociações da semana anterior');\r\n      })\r\n  }\r\n\r\n  obterNegociacoesDaSemanaRetrasada() {\r\n    return this._http\r\n      .get('negociacoes/retrasada')\r\n      .then(negociacoes => {\r\n        return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n      })\r\n      .catch(erro => {\r\n        console.log(erro);\r\n        throw new Error('Não foi possível obter as negociações da semana retrasada');\r\n      })\r\n  }\r\n\r\n  cadastra(negociacao) {\r\n    return ConnectionFactory\r\n      .getConnection()\r\n      .then(connection => new NegociacaoDao(connection))\r\n      .then(dao => dao.adiciona(negociacao))\r\n      .then(() => 'Negociação adicionada com sucesso')\r\n      .catch(erro => {\r\n        console.log(erro);\r\n        throw new Error('Não foi possível adicionar a negociação');\r\n      });\r\n  }\r\n\r\n  lista() {\r\n    return ConnectionFactory\r\n      .getConnection()\r\n      .then(connection => new NegociacaoDao(connection))\r\n      .then(dao => dao.listaTodos())\r\n      .catch(erro => {\r\n        console.log(erro);\r\n        throw new Error('Não foi possível obter as negociações');\r\n      });\r\n\r\n  }\r\n\r\n  apaga() {\r\n\r\n    return ConnectionFactory\r\n      .getConnection()\r\n      .then(connection => new NegociacaoDao(connection))\r\n      .then(dao => dao.apagaTodos())\r\n      .then(() => 'Negociações apagadas com sucesso')\r\n      .catch(erro => {\r\n        console.log(erro);\r\n        throw new Error('Não foi possível apagar as negociações');\r\n      });\r\n  }\r\n\r\n  importa(listaAtual) {\r\n\r\n    return this.obterNegociacoes()\r\n      .then(negociacoes =>\r\n        negociacoes.filter(negociacao =>\r\n          // comparação de objetos não dá certo do jeito tradicional\r\n          // por isso fizemos um jeito de comparar os objetos em json -> string\r\n          !listaAtual.some(negociacaoExistente =>\r\n            negociacao.isEquals(negociacaoExistente)))\r\n      )\r\n      .catch(erro => {\r\n        console.log(erro);\r\n        throw new Error('Não foi possível buscar negociações para importar');\r\n      })\r\n  }\r\n\r\n}"]}