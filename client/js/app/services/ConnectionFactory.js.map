{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAY;AACnC;AACA;AACA;;AAEA;AACA,MAAMC,SAAS,CAAC,aAAD,CAAf;AACA,MAAMC,UAAU,CAAhB;AACA,MAAMC,SAAS,YAAf;;AAEA;AACA,MAAIC,aAAa,IAAjB;;AAEA;AACA,MAAIC,QAAQ,IAAZ;;AAEA;AAEE,iCAAc;AAAA;;AACZ,YAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACD;;AAJH;AAAA;AAAA,sCAMyB;AACrB,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,cAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEA;AACAQ,sBAAYI,eAAZ,GAA8B;AAAA,mBAAKd,kBAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC,CAAL;AAAA,WAA9B;;AAEA;AACAR,sBAAYS,SAAZ,GAAwB,aAAK;;AAE3B;AACA,gBAAI,CAACf,UAAL,EAAiB;AACfA,2BAAaY,EAAEC,MAAF,CAASC,MAAtB;AACA;AACAb,sBAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,yBAAWC,KAAX,GAAmB,YAAY;AAC7B;AACA,sBAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACD,eAHD;AAID;;AAEDE,oBAAQJ,UAAR;AACD,WAdD;;AAgBA;AACAM,sBAAYW,OAAZ,GAAsB,aAAK;AACzBC,oBAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB,EADyB,CACI;AAC7Bf,mBAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB,EAFyB,CAEI;AAC9B,WAHD;AAKD,SA7BM,CAAP;AA8BD;AArCH;AAAA;AAAA,oCAuCuBrB,UAvCvB,EAuCmC;AAC/BH,eAAOyB,OAAP,CAAe,iBAAS;AACtB,cAAItB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiDzB,WAAW0B,iBAAX,CAA6BD,KAA7B;AACjD;;AAEAzB,qBAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACA;AACD,SAND;AAOD;AA/CH;AAAA;AAAA,wCAiD2B;AACvB,YAAI5B,UAAJ,EAAgB;AACdC;AACA;AACA;;AAEA;AACAD,uBAAa,IAAb;AACD;AACF;AA1DH;;AAAA;AAAA;AA8DD,CA9EuB,EAAxB,C,CA8EM","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function () { \r\n  // module pattern, as variáveis daqui de dentro não podem ser acessadas, \r\n  // porem a classe sim, como ela está sendo retornada\r\n  // esse function () {} seria uma função anônima, adaptamos ao js com a função auto-invocada\r\n\r\n  // variáveis \"globais\" para fácil manutenção\r\n  const stores = ['negociacoes'];\r\n  const version = 4;\r\n  const dbName = 'aluraframe';\r\n\r\n  // restringindo a criação de novas conexões\r\n  var connection = null; \r\n\r\n  // variável que irá receber o connection.close();\r\n  var close = null;\r\n\r\n  return class ConnectionFactory {\r\n\r\n    constructor() {\r\n      throw new Error('Não é possível criar instâncias de ConnectionFactory');\r\n    }\r\n\r\n    static getConnection() {\r\n      return new Promise((resolve, reject) => {\r\n        let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n        // cria ou altera um banco já existente, só é executado quando a version, é maior que a anterior\r\n        openRequest.onupgradeneeded = e => ConnectionFactory._createStores(e.target.result);\r\n\r\n        // é executado se a conexão foi bem sucedida\r\n        openRequest.onsuccess = e => {\r\n\r\n          // a primeira conexão com esse banco é única\r\n          if (!connection) {\r\n            connection = e.target.result;\r\n            // guardando a função close\r\n            close = connection.close.bind(connection);\r\n            connection.close = function () {\r\n              // executado caso o dev tente criar a connection com um .close nela\r\n              throw new Error('Você não pode fechar diretamente a conexão');\r\n            };\r\n          };\r\n          \r\n          resolve(connection);\r\n        };\r\n\r\n        // é executado se a conexão foi mal sucedida\r\n        openRequest.onerror = e => {\r\n          console.log(e.target.error); // lança o erro no console\r\n          reject(e.target.error.name); // retorna uma string com o erro\r\n        };\r\n\r\n      });\r\n    }\r\n\r\n    static _createStores(connection) {\r\n      stores.forEach(store => {\r\n        if (connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\r\n        // para atualizar a versão da store, deletamos ela, se ela existir\r\n\r\n        connection.createObjectStore(store, { autoIncrement: true });\r\n        // cria a store, autoIncrement dá um id único pra cada item que entrar nela\r\n      });\r\n    }\r\n\r\n    static closeConnection() {\r\n      if (connection) {\r\n        close();\r\n        // Reflect.apply(close, connection, []); // (método, contexto, parâmetros)\r\n        // alternativa sem o bind()\r\n        \r\n        // deixando null, para passar no if do onsuccess\r\n        connection = null;\r\n      }\r\n    };\r\n\r\n  }\r\n\r\n})(); // função auto-invocada"]}