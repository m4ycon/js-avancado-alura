{"version":3,"sources":["../../app-es6/services/HttpService.js"],"names":["HttpService","res","ok","Error","statusText","url","fetch","then","_handleErrors","json","dado","headers","method","body","JSON","stringify"],"mappings":";;;;;;IAAMA,W;;;;;;;kCAEUC,G,EAAK;AACjB;AACA;AACA;AACA,UAAI,CAACA,IAAIC,EAAT,EAAa,MAAM,IAAIC,KAAJ,CAAUF,IAAIG,UAAd,CAAN;AACb,aAAOH,GAAP;AACD;;;wBAEGI,G,EAAK;AAAA;;AACP;AACA,aAAOC,MAAMD,GAAN,EACJE,IADI,CACC;AAAA,eAAO,MAAKC,aAAL,CAAmBP,GAAnB,CAAP;AAAA,OADD;AAEL;AAFK,OAGJM,IAHI,CAGC;AAAA,eAAON,IAAIQ,IAAJ,EAAP;AAAA,OAHD,CAAP;;AAKA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;;yBAEIJ,G,EAAKK,I,EAAM;AAAA;;AACd;AACA,aAAOJ,MAAMD,GAAN,EAAW;AAChBM,iBAAS,EAAE,gBAAgB,kBAAlB,EADO;AAEhBC,gBAAQ,MAFQ;AAGhBC,cAAMC,KAAKC,SAAL,CAAeL,IAAf;AAHU,OAAX,EAKNH,IALM,CAKD;AAAA,eAAO,OAAKC,aAAL,CAAmBP,GAAnB,CAAP;AAAA,OALC,CAAP;;AAQA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD","file":"HttpService.js","sourcesContent":["class HttpService {\r\n\r\n  _handleErrors(res) {\r\n    // res.ok retorna true ou false, de acordo com o status da requisição 200>x>299\r\n    // res.statusText retorna a mensagem do status ex:'200->ok',\r\n    // que cairá no catch de quem chamou se for algum erro\r\n    if (!res.ok) throw new Error(res.statusText);\r\n    return res;\r\n  }\r\n\r\n  get(url) {\r\n    // api do es2016 - FETCH, simplifica a comunicação com um servidor\r\n    return fetch(url)\r\n      .then(res => this._handleErrors(res))\r\n      // retorna em js, a resposta lida em json\r\n      .then(res => res.json());\r\n\r\n    // MÉTODO TRADICIONAL\r\n    // return new Promise((resolve, reject) => {\r\n    //   let xhr = new XMLHttpRequest();\r\n    //   xhr.open('GET', url);\r\n\r\n    //   xhr.onreadystatechange = () => {\r\n    //     if (xhr.readyState == 4) {\r\n    //       if (xhr.status == 200) {\r\n    //         resolve(JSON.parse(xhr.responseText));\r\n    //       } else {\r\n    //         reject(xhr.responseText);\r\n    //       }\r\n    //     }\r\n    //   };\r\n    //   xhr.send();\r\n    // });\r\n  }\r\n\r\n  post(url, dado) {\r\n    // post com o fetch api\r\n    return fetch(url, {\r\n      headers: { 'Content-Type': 'application/json' },\r\n      method: 'post',\r\n      body: JSON.stringify(dado)\r\n    })\r\n    .then(res => this._handleErrors(res));\r\n\r\n\r\n    // MÉTODO TRADICIONAL\r\n    // return new Promise((resolve, reject) => {\r\n    //   let xhr = new XMLHttpRequest();\r\n    //   xhr.open('POST', url, true);\r\n    //   xhr.setRequestHeader('Content-Type', 'application/json');\r\n\r\n    //   xhr.onreadystatechange = () => {\r\n    //     if (xhr.readyState == 4) {\r\n    //       if (xhr.status == 200) {\r\n    //         resolve(JSON.parse(xhr.responseText));\r\n    //       } else {\r\n    //         reject(xhr.responseText);\r\n    //       }\r\n    //     }\r\n    //   }\r\n    //   xhr.send(JSON.stringify(dado));\r\n    // });\r\n  }\r\n\r\n}"]}