{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","console","log","e","target","error","cursor","openCursor","negociacoes","atual","result","dado","value","push","Negociacao","_data","_quantidade","_valor","continue","name","clear"],"mappings":";;;;;;IAAMA,a;AACJ,yBAAYC,UAAZ,EAAwB;AAAA;;AAEtB,SAAKC,WAAL,GAAmBD,UAAnB;AACA,SAAKE,MAAL,GAAc,aAAd;AAED;;;;6BAEQC,U,EAAY;AAAA;;AACnB,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAIC,UAAU,MAAKN;AACjB;AADY,SAEXO,WAFW,CAEC,CAAC,MAAKN,MAAN,CAFD,EAEgB,WAFhB,EAGXO,WAHW,CAGC,MAAKP,MAHN;AAIZ;AAJY,SAKXQ,GALW,CAKPP,UALO,CAAd;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAI,gBAAQI,SAAR,GAAoB;AAAA,iBAAKN,SAAL;AAAA,SAApB;;AAEAE,gBAAQK,OAAR,GAAkB,aAAK;AACrBC,kBAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,iBAAO,yCAAP;AACD,SAHD;AAID,OAtBM,CAAP;AAuBD;;;iCAEY;AAAA;;AACX,aAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAIY,SAAS,OAAKjB,WAAL,CACVO,WADU,CACE,CAAC,OAAKN,MAAN,CADF,EACiB,WADjB,EAEVO,WAFU,CAEE,OAAKP,MAFP,EAGViB,UAHU,EAAb;;AAKA,YAAIC,cAAc,EAAlB;;AAEA;AACAF,eAAOP,SAAP,GAAmB,aAAK;AACtB;AACA,cAAIU,QAAQN,EAAEC,MAAF,CAASM,MAArB;;AAEA,cAAID,KAAJ,EAAW;AAAE;;AAEX,gBAAIE,OAAOF,MAAMG,KAAjB,CAFS,CAEe;;AAExBJ,wBAAYK,IAAZ,CAAiB,IAAIC,UAAJ,CAAeH,KAAKI,KAApB,EAA2BJ,KAAKK,WAAhC,EAA6CL,KAAKM,MAAlD,CAAjB;AACAR,kBAAMS,QAAN,GALS,CAKS;AACnB,WAND,MAMO;AACL;AACAzB,oBAAQe,WAAR;AACD;AACF,SAdD;;AAgBAF,eAAON,OAAP,GAAiB,aAAK;AACpBC,kBAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAAT,CAAec,IAA3B;AACAzB,iBAAO,wCAAP;AACD,SAHD;AAID,OA7BM,CAAP;AA8BD;;;iCAEY;AAAA;;AACX,aAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAIC,UAAU,OAAKN,WAAL,CACXO,WADW,CACC,CAAC,OAAKN,MAAN,CADD,EACgB,WADhB,EAEXO,WAFW,CAEC,OAAKP,MAFN,EAGX8B,KAHW,EAAd,CADsC,CAI1B;;AAEZzB,gBAAQI,SAAR,GAAoB;AAAA,iBAAKN,QAAQ,kCAAR,CAAL;AAAA,SAApB;;AAEAE,gBAAQK,OAAR,GAAkB,aAAK;AACrBC,kBAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,iBAAO,wCAAP;AACD,SAHD;AAKD,OAbM,CAAP;AAcD","file":"NegociacaoDao.js","sourcesContent":["class NegociacaoDao {\r\n  constructor(connection) {\r\n\r\n    this._connection = connection;\r\n    this._store = 'negociacoes';\r\n\r\n  }\r\n\r\n  adiciona(negociacao) {\r\n    return new Promise((resolve, reject) => {\r\n      let request = this._connection\r\n        // esses dois fazem a conexão com a lista/store do banco de dados\r\n        .transaction([this._store], 'readwrite')\r\n        .objectStore(this._store)\r\n        // adiciona a negociação na objectStore\r\n        .add(negociacao);\r\n\r\n      // MÉTODO ABORT\r\n      // podemos abortar uma transação com o .abort\r\n      // transaction.abort();\r\n      // transaction.onabort = e => {\r\n      //   console.log(e);\r\n      //   console.log('Transação abortada');\r\n      // };\r\n\r\n      request.onsuccess = e => resolve();\r\n\r\n      request.onerror = e => {\r\n        console.log(e.target.error);\r\n        reject('Não foi possível adicionar a negociação');\r\n      };\r\n    });\r\n  }\r\n\r\n  listaTodos() {\r\n    return new Promise((resolve, reject) => {\r\n      let cursor = this._connection\r\n        .transaction([this._store], 'readwrite')\r\n        .objectStore(this._store)\r\n        .openCursor();\r\n\r\n      let negociacoes = [];\r\n\r\n      // é chamado de acordo com o número de itens na lista/store\r\n      cursor.onsuccess = e => {\r\n        // te dá um item para o qual está \"apontando\" (aponta para o primeiro item)\r\n        let atual = e.target.result;\r\n\r\n        if (atual) { // se há um ponteiro válido\r\n\r\n          let dado = atual.value; // os dados do item\r\n\r\n          negociacoes.push(new Negociacao(dado._data, dado._quantidade, dado._valor));\r\n          atual.continue(); // pula para o próximo item da lista\r\n        } else {\r\n          // devolve todas as negociações que estavam na lista\r\n          resolve(negociacoes);\r\n        }\r\n      };\r\n\r\n      cursor.onerror = e => {\r\n        console.log(e.target.error.name);\r\n        reject('Não foi possível listar as negociações');\r\n      };\r\n    });\r\n  }\r\n\r\n  apagaTodos() {\r\n    return new Promise((resolve, reject) => {\r\n      let request = this._connection\r\n        .transaction([this._store], 'readwrite')\r\n        .objectStore(this._store)\r\n        .clear(); // limpa a store\r\n\r\n      request.onsuccess = e => resolve('Negociações apagadas com sucesso');\r\n\r\n      request.onerror = e => {\r\n        console.log(e.target.error);\r\n        reject('Não foi possível apagar as negociações');\r\n      };\r\n\r\n    })\r\n  }\r\n\r\n\r\n}"]}